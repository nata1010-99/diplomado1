import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px

def show_visualization_tab():
    st.header("üìà Visualizaciones por Departamento")

    # Verificaciones
    if 'df_poblacion' in st.session_state:
        st.success("‚úÖ Base de poblaci√≥n cargada")
    else:
        st.warning("‚ö†Ô∏è Base de poblaci√≥n NO cargada")

    if 'df_densidad' in st.session_state:
        st.success("‚úÖ Base de densidad escolar cargada")
    else:
        st.warning("‚ö†Ô∏è Base de densidad escolar NO cargada")

    if 'df_fact' not in st.session_state:
        st.warning("Primero debes construir la tabla de hechos en la pesta√±a 'Transformaci√≥n y M√©tricas'.")
        return

    # Preparaci√≥n de datos
    df_fact = st.session_state['df_fact']
    dim_geo = st.session_state['dim_geo']
    dim_tiempo = st.session_state['dim_tiempo']
    df = df_fact.merge(dim_geo, on='id_geo').merge(dim_tiempo, on='id_tiempo')
    df.columns = [col.lower() for col in df.columns]
    deptos = sorted(df['departamento'].unique())

    # GRAFICO 1
    st.subheader("üìä Serie de tiempo: Tasa de Matriculaci√≥n vs Cobertura Neta")
    selected_depto_1 = st.selectbox("Selecciona un departamento (Gr√°fico 1)", deptos)
    df_1 = df[df['departamento'] == selected_depto_1]
    df_1 = df_1.groupby('a_o')[['tasa_matriculaci_n_5_16', 'cobertura_neta']].mean().reset_index()

    fig1 = go.Figure()
    fig1.add_trace(go.Scatter(x=df_1['a_o'], y=df_1['tasa_matriculaci_n_5_16'],
                              name='Tasa de Matriculaci√≥n (5-16)', mode='lines+markers', yaxis='y1', line=dict(color='blue')))
    fig1.add_trace(go.Scatter(x=df_1['a_o'], y=df_1['cobertura_neta'],
                              name='Cobertura Neta', mode='lines+markers', yaxis='y2', line=dict(color='orange')))
    fig1.update_layout(title=f"Serie de tiempo - {selected_depto_1}",
                       xaxis=dict(title='A√±o'),
                       yaxis=dict(title='Tasa de Matriculaci√≥n (%)', tickfont=dict(color='blue')),
                       yaxis2=dict(title='Cobertura Neta (%)', overlaying='y', side='right', tickfont=dict(color='orange')),
                       legend=dict(x=0.01, y=0.99),
                       height=500)
    st.plotly_chart(fig1, use_container_width=True)

    # GRAFICO 2
    st.subheader("üìä Serie de tiempo: Cobertura Bruta vs Otra M√©trica")
    selected_depto_2 = st.selectbox("Selecciona un departamento (Gr√°fico 2)", deptos, index=deptos.index(selected_depto_1))
    df_2 = df[df['departamento'] == selected_depto_2].groupby('a_o')[['cobertura_bruta']].mean().reset_index()

    if 'repitencia_secundaria' in df.columns:
        df_2['otra_metrica'] = df[df['departamento'] == selected_depto_2].groupby('a_o')['repitencia_secundaria'].mean().values
        nombre_metrica = 'Repitencia secundaria'
    else:
        df_2['otra_metrica'] = df[df['departamento'] == selected_depto_2].groupby('a_o')['tasa_matriculaci_n_5_16'].mean().values
        nombre_metrica = 'Tasa de Matriculaci√≥n (5-16)'

    fig2 = go.Figure()
    fig2.add_trace(go.Scatter(x=df_2['a_o'], y=df_2['cobertura_bruta'],
                              name='Cobertura Bruta', mode='lines+markers', yaxis='y1', line=dict(color='green')))
    fig2.add_trace(go.Scatter(x=df_2['a_o'], y=df_2['otra_metrica'],
                              name=nombre_metrica, mode='lines+markers', yaxis='y2', line=dict(color='purple')))
    fig2.update_layout(title=f"Cobertura Bruta vs {nombre_metrica} - {selected_depto_2}",
                       xaxis=dict(title='A√±o'),
                       yaxis=dict(title='Cobertura Bruta (%)', tickfont=dict(color='green')),
                       yaxis2=dict(title=nombre_metrica, overlaying='y', side='right', tickfont=dict(color='purple')),
                       legend=dict(x=0.01, y=0.99),
                       height=500)
    st.plotly_chart(fig2, use_container_width=True)

    # GRAFICOS DE POBLACION (solo si df_poblacion existe)
    if 'df_poblacion' in st.session_state:
        df_pob = st.session_state['df_poblacion'].copy()
        df_pob.columns = [col.lower() for col in df_pob.columns]

        st.subheader("üåç Composici√≥n Urbana vs Rural - Pie Chart")
        if '√°rea geogr√°fica' in df_pob.columns:
            df_pob_depto = df_pob[df_pob['dpnom'] == selected_depto_1].groupby('√°rea geogr√°fica')['poblaci√≥n'].sum().reset_index()
        elif '√°rea_geogr√°fica' in df_pob.columns:
            df_pob_depto = df_pob[df_pob['dpnom'] == selected_depto_1].groupby('√°rea_geogr√°fica')['poblaci√≥n'].sum().reset_index()
        else:
            st.error("‚ö†Ô∏è No se encuentra la columna de '√Årea Geogr√°fica'")
            df_pob_depto = pd.DataFrame()

        if not df_pob_depto.empty:
            fig3 = px.pie(df_pob_depto, names=df_pob_depto.columns[0], values='poblaci√≥n',
                          title=f"Distribuci√≥n poblacional urbana/rural - {selected_depto_1}",
                          color_discrete_sequence=px.colors.sequential.RdBu)
            st.plotly_chart(fig3, use_container_width=True)

        # GRAFICO 4 - Evoluci√≥n de la poblaci√≥n total por a√±o
        st.subheader("üìà Evoluci√≥n de la poblaci√≥n total")
        df_pob_total = df_pob[df_pob['dpnom'] == selected_depto_1].groupby('a√±o')['poblaci√≥n'].sum().reset_index()
        fig4 = px.line(df_pob_total, x='a√±o', y='poblaci√≥n',
                       title=f"Evoluci√≥n de la poblaci√≥n total en {selected_depto_1}",
                       markers=True)
        st.plotly_chart(fig4, use_container_width=True)

        # GRAFICO 5 - Comparaci√≥n urbana vs rural por a√±o
        st.subheader("üèôÔ∏è Poblaci√≥n Urbana vs Rural por A√±o")
        df_pob_tipo = df_pob[df_pob['dpnom'] == selected_depto_1].groupby(['a√±o', '√°rea geogr√°fica'])['poblaci√≥n'].sum().reset_index()
        fig5 = px.bar(df_pob_tipo, x='a√±o', y='poblaci√≥n', color='√°rea geogr√°fica',
                      barmode='group',
                      title=f"Poblaci√≥n Urbana vs Rural por a√±o - {selected_depto_1}")
        st.plotly_chart(fig5, use_container_width=True)

        # GRAFICO 6 - Porcentaje acumulado urbano vs rural
        st.subheader("üìä Porcentaje acumulado de poblaci√≥n urbana/rural")
        df_sum = df_pob[df_pob['dpnom'] == selected_depto_1].groupby('√°rea geogr√°fica')['poblaci√≥n'].sum().reset_index()
        df_sum['%'] = df_sum['poblaci√≥n'] / df_sum['poblaci√≥n'].sum() * 100
        fig6 = px.pie(df_sum, names='√°rea geogr√°fica', values='poblaci√≥n',
                      title=f"Distribuci√≥n porcentual acumulada - {selected_depto_1}",
                      hole=0.4)
        st.plotly_chart(fig6, use_container_width=True)
